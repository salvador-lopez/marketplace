# PHP CircleCI 2.0 configuration file
# See: https://circleci.com/docs/2.0/language-php/
version: 2.1
orbs:
  browser-tools: circleci/browser-tools@1.2.3
  
# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  test-job:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    docker:
      # Specify the version you desire here
      - image: cimg/php:8.1-browsers

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # Using the RAM variation mitigates I/O contention
      # for database intensive operations.
      # - image: circleci/mysql:5.7-ram
      #
      # - image: redis:2.8.19

    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout
      - browser-tools/install-browser-tools

      - run: sudo apt update # PHP CircleCI 2.0 Configuration File# PHP CircleCI 2.0 Configuration File sudo apt install zlib1g-dev libsqlite3-dev
      #- run: sudo docker-php-ext-install zip

      # Download and cache dependencies
      - restore_cache:
          keys:
            # "composer.lock" can be used if it is committed to the repo
            - v1-dependencies-{{ checksum "composer.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: composer install -n --prefer-dist

      - save_cache:
          key: v1-dependencies-{{ checksum "composer.json" }}
          paths:
            - ./vendor

      # TODO prepare the database
  
#      - run:
#          name: "Run tests with coverage"
#          command: |
#            mkdir -p ~/phpunit
#            phpdbg -qrr bin/phpunit --coverage-html build/coverage-report --log-junit ~/phpunit/junit.xml tests
#          when: always
#          environment:
#            XDEBUG_MODE: coverage
#      - store_artifacts:
#          path:  build/coverage-report
      - run:
            command: |
              mkdir -p ~/phpunit
              bin/phpunit --log-junit ~/phpunit/junit.xml tests
            when: always
      - store_test_results:
          path: ~/phpunit
  deploy-dev-job:
    docker:
      - image: google/cloud-sdk:latest
    steps:
      - run: |
          echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account --key-file=-
          gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
          gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
      - run:
          name: Deploy Main to GKE
          command: kubectl apply -f deployment/dev/nginx-deployment.yaml

workflows:
  version: 2
  test-deploy:
    jobs:
      - test-job
      - deploy-dev-job:
          requires:
            - test-job # Only deploy dev once the test job has completed